---
title: "Кампусы России"
author: "[ Исследование Ксении Гайдай ]"
format: dashboard
html:
  theme: cosmo
  toc: false
  page-layout: full
---

# ДВФУ
## Column {.tabset}
```{r, out.width = '100%'}
#| echo: false
#| message: false
#| warning: false
#| title: "План кампуса"
#| padding: 0px
# Загружаем библиотеки
library(leaflet)
library(sf)
library(dplyr)
library(htmltools)
library(colorRamps)
library(RColorBrewer)

# Загружаем данные
buildings <- st_read("Buildings_poly.geojson", quiet = TRUE)
campus <- st_read("education_poly.geojson", quiet = TRUE)

# Переводим типы зданий на русский и убираем NA значения
buildings <- buildings %>%
  mutate(
    b_type_rus = recode(
      b_type,
      "academ" = "Академическое",
      "cultural" = "Культурное",
      "dormit" = "Общежитие",
      "indust" = "Индустриальное",
      "lab" = "Лабораторное",
      "parking" = "Парковка",
      "pit" = "Столовая",
      "sport" = "Спортивное",
      "tech" = "Техническое",
      .default = b_type
    )
  ) %>%
  filter(!is.na(b_type_rus) & b_type_rus != "null")  # Убираем null и NA значения

# Центр карты
center <- c(lat = 43.028842, lng = 131.893193)

# Палитра для типов зданий
b_types <- unique(buildings$b_type_rus)
n <- length(b_types)
colors <- brewer.pal(max(n, 3), "Set2") # минимум 3 цвета
palette <- colorFactor(colors, domain = b_types)

# Создаём базовую карту
map <- leaflet() %>%
  addProviderTiles("CartoDB.Positron", group = "Стандартная основа") %>%
  addProviderTiles("Esri.WorldImagery", group = "Спутниковая основа", options = providerTileOptions(opacity = 0.5)) %>%
  setView(lng = center["lng"], lat = center["lat"], zoom = 15) %>%
  
  # Слой с границей кампуса
  addPolygons(
    data = campus,
    color = "blue",
    weight = 2,
    group = "Граница кампуса"
  ) %>%
  
  # Кнопка сброса масштаба
  addEasyButton(easyButton(
    icon = "fa-globe",
    title = "Сбросить масштаб",
    onClick = JS(
      paste0("function(btn, map){ map.setView([", center["lat"], ", ", center["lng"], "], 16); }")
    )
  ))

# Добавляем отдельный слой для каждого типа здания
for(type in b_types){
  map <- map %>%
    addPolygons(
      data = buildings %>% filter(b_type_rus == type),
      color = "black",
      weight = 1,
      fillColor = ~palette(b_type_rus),
      fillOpacity = 0.7,
      popup = ~paste("<b>Тип здания:</b>", b_type_rus),
      group = type
    )
}

# Легенда
map <- map %>%
  addLegend(
    "topright",
    pal = palette,
    values = buildings$b_type_rus,
    title = "Типы зданий",
    opacity = 0.7
  ) %>%
  
  # Объединенный контрол в левом нижнем углу
  addLayersControl(
    baseGroups = c("Стандартная основа", "Спутниковая основа"),
    overlayGroups = c(b_types, "Граница кампуса"),
    options = layersControlOptions(collapsed = FALSE, position = "bottomleft")
  )

map
```

```{r, out.width = '100%'}
#| echo: false
#| message: false
#| warning: false
#| title: "Функциональные зоны"
#| padding: 0px
# Загружаем библиотеки
library(leaflet)
library(sf)
library(dplyr)
library(htmltools)
library(colorRamps)
library(RColorBrewer)

# Загружаем данные функциональных зон
func_zones <- st_read("func_zones.geojson", quiet = TRUE)
roads <- st_read("transs.geojson", quiet = TRUE)

# Центр карты
center <- c(lat = 43.028842, lng = 131.893193)

# Переводим типы зон на русский язык
func_zones <- func_zones %>%
  filter(!is.na(FZ) & FZ != "null" & FZ != "") %>%
  mutate(
    FZ_rus = recode(
      FZ,
      "academ"   = "Научно-образовательная",
      "cultural" = "Культурно-образовательная",
      "dormit"   = "Жилая",
      "green"    = "Ландшафтно-рекреационная",
      "indust"   = "Зона строительства",
      "parking"  = "Парковочная",
      "sport"    = "Спортивная",
      "tech"     = "Коммунального хозяйства",
      "uslugi"   = "Зона услуг"
    )
  )

# Жёстко заданные цвета по типам FZ
color_map <- c(
  "academ"   = "#f23761",
  "cultural" = "#f952e2",
  "dormit"   = "#ff807a",
  "green"    = "#abeca3",
  "indust"   = "#6863db",
  "parking"  = "#a82072",
  "sport"    = "#ffa860",
  "tech"     = "#8daf93",
  "uslugi"   = "#fff3a3"
)

# Палитра по исходным кодам FZ
palette <- colorFactor(color_map, domain = names(color_map))

# Создаём базовую карту
map <- leaflet() %>%
  addProviderTiles("CartoDB.Positron", group = "Стандартная основа") %>%
  addProviderTiles("Esri.WorldImagery", group = "Спутниковая основа",
                   options = providerTileOptions(opacity = 0.5)) %>%
  setView(lng = center["lng"], lat = center["lat"], zoom = 15) %>%
  
  # Кнопка сброса масштаба
  addEasyButton(easyButton(
    icon = "fa-globe",
    title = "Сбросить масштаб",
    onClick = JS(
      paste0("function(btn, map){ map.setView([", center["lat"], ", ", center["lng"], "], 16); }")
    )
  ))

# Добавляем полигоны одним вызовом, с динамической раскраской по палитре
map <- map %>%
  addPolygons(
    data = func_zones,
    color = "black",
    weight = 1,
    fillColor = ~palette(FZ),
    fillOpacity = 0.7,
    popup = ~paste("<b>Функциональная зона:</b>", FZ_rus),
    group = ~FZ_rus
  )

# Добавляем легенду и контролы
map <- map %>%
  addLegend(
    "topright",
    colors = unname(color_map),
    labels = c(
      "Научно-образовательная",
      "Культурно-образовательная",
      "Жилая",
      "Ландшафтно-рекреационная",
      "Зона строительства",
      "Парковочная",
      "Спортивная",
      "Коммунального хозяйства",
      "Зона услуг"
    ),
    title = "Функциональные зоны",
    opacity = 0.9
  ) %>%
  addLayersControl(
    baseGroups = c("Стандартная основа", "Спутниковая основа"),
    overlayGroups = unique(func_zones$FZ_rus),
    options = layersControlOptions(collapsed = FALSE, position = "bottomleft")
  )
map
```

# МГУ
Информация про МГУ

# ПГНИУ
Информация про ПГНИУ
